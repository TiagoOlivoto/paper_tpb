$add.smooth
[1] TRUE

$ambiguousMethodSelection
function (cond) 
NULL
<environment: R_EmptyEnv>

$askpass
function (prompt) 
{
    .rs.askForPassword(prompt)
}
<environment: 0x000002a5758b9f40>

$asksecret
function (name, title = name, prompt = paste(name, ":", sep = "")) 
{
    .rs.askForSecret(name, title, prompt)
}
<environment: 0x000002a5758b9f40>

$askYesNo
function (msg, ...) 
{
    flush.console()
    ans <- winDialog("yesnocancel", msg)
    switch(ans, YES = TRUE, NO = FALSE, NA)
}
<bytecode: 0x000002a574da0028>
<environment: namespace:utils>

$browser
function (url) 
{
    .Call("rs_browseURL", url, PACKAGE = "(embedding)")
}
<environment: 0x000002a5758b9f40>

$browserNLdisabled
[1] FALSE

$buildtools.check
function (action) 
{
    .rs.checkBuildTools(action)
}
<environment: 0x000002a5750f8b10>

$buildtools.with
function (code) 
{
    .rs.withBuildTools(code)
}
<environment: 0x000002a5750f8b10>

$CBoundsCheck
[1] FALSE

$check.bounds
[1] FALSE

$citation.bibtex.max
[1] 1

$connectionObserver
$connectionObserver$connectionOpened
function (type, host, displayName, icon = NULL, connectCode, 
    disconnect, listObjectTypes, listObjects, listColumns, previewObject, 
    connectionObject, actions = NULL) 
{
    if (!inherits(listObjectTypes, "function")) {
        stop("listObjectTypes must be a function returning a list of object types", 
            call. = FALSE)
    }
    promote <- function(name, l) {
        if (length(l) == 0) 
            return(list())
        if (is.null(l$contains)) {
            return(list(list(name = name, icon = l$icon, contains = "data")))
        }
        else {
            return(unlist(append(list(list(list(name = name, 
                icon = l$icon, contains = names(l$contains)))), 
                lapply(names(l$contains), function(name) {
                  promote(name, l$contains[[name]])
                })), recursive = FALSE))
        }
        return(list())
    }
    objectTree <- listObjectTypes()
    objectTypes <- lapply(names(objectTree), function(name) {
        promote(name, objectTree[[name]])
    })[[1]]
    connection <- list(type = type, host = host, displayName = displayName, 
        icon = icon, connectCode = connectCode, disconnect = disconnect, 
        objectTypes = objectTypes, listObjects = listObjects, 
        listColumns = listColumns, previewObject = previewObject, 
        actions = actions, connectionObject = connectionObject)
    class(connection) <- "rstudioConnection"
    .rs.validateConnection(connection)
    cacheKey <- paste(connection$type, connection$host, .Call("rs_generateShortUuid"), 
        sep = "_")
    assign(cacheKey, value = connection, envir = .rs.activeConnections)
    invisible(.Call("rs_connectionOpened", connection))
}
<environment: 0x000002a575c78230>

$connectionObserver$connectionClosed
function (type, host, ...) 
{
    .rs.validateCharacterParams(list(type = type, host = host))
    name <- .rs.findConnectionName(type, host)
    if (!is.null(name)) 
        rm(list = name, envir = .rs.activeConnections)
    invisible(.Call("rs_connectionClosed", type, host))
}
<environment: 0x000002a575c78230>

$connectionObserver$connectionUpdated
function (type, host, hint, ...) 
{
    .rs.validateCharacterParams(list(type = type, host = host, 
        hint = hint))
    invisible(.Call("rs_connectionUpdated", type, host, hint))
}
<environment: 0x000002a575c78230>


$continue
[1] "+ "

$contrasts
        unordered           ordered 
"contr.treatment"      "contr.poly" 

$cpp11_preserve_xptr
<pointer: 0x000002a57ed3f420>

$datatable.alloccol
[1] 1024

$datatable.allow.cartesian
[1] FALSE

$datatable.auto.index
[1] TRUE

$datatable.dfdispatchwarn
[1] TRUE

$datatable.fread.dec.experiment
[1] FALSE

$datatable.optimize
[1] Inf

$datatable.print.class
[1] FALSE

$datatable.print.colnames
[1] "auto"

$datatable.print.keys
[1] FALSE

$datatable.print.nrows
[1] 100

$datatable.print.rownames
[1] TRUE

$datatable.print.topn
[1] 5

$datatable.print.trunc.cols
[1] FALSE

$datatable.use.index
[1] TRUE

$datatable.verbose
[1] FALSE

$datatable.warnredundantby
[1] TRUE

$defaultPackages
[1] "datasets"  "utils"     "grDevices" "graphics"  "stats"     "methods"  

$demo.ask
[1] "default"

$deparse.cutoff
[1] 60

$device
[1] "RStudioGD"

$device.ask.default
[1] FALSE

$digits
[1] 7

$download.file.method
[1] "wininet"

$dplyr.show_progress
[1] TRUE

$echo
[1] TRUE

$editor
function (name, file = "", title = file, ...) 
{
    if (missing(name) || is.null(name)) 
        return(.Call("rs_editFile", file, PACKAGE = "(embedding)"))
    if (is.null(file) || !nzchar(file)) {
        file <- tempfile("rstudio-scratch-", fileext = ".R")
        on.exit(unlink(file), add = TRUE)
    }
    deparsed <- if (is.function(name)) 
        .rs.deparseFunction(name, useSource = TRUE, asString = FALSE)
    else deparse(name)
    writeLines(deparsed, con = file)
    .Call("rs_editFile", file, PACKAGE = "(embedding)")
    eval(parse(file), envir = globalenv())
}
<environment: 0x000002a575029e20>

$encoding
[1] "native.enc"

$error
(function () 
{
    .rs.recordTraceback(TRUE, 5, .rs.enqueueError)
})()

$example.ask
[1] "default"

$expressions
[1] 5000

$fansi.css
[1] "PRE.fansi SPAN {padding-top: .25em; padding-bottom: .25em};"

$fansi.ctrl
[1] "all"

$fansi.tab.stops
[1] 8

$fansi.tabs.as.spaces
[1] FALSE

$fansi.term.cap
[1] "bright" "256"   

$fansi.warn
[1] TRUE

$ggvis.renderer
[1] "svg"

$help.search.types
[1] "vignette" "demo"     "help"    

$help.try.all.packages
[1] FALSE

$help_type
[1] "html"

$HTTPUserAgent
[1] "RStudio Desktop (1.4.1103); R (4.1.0 x86_64-w64-mingw32 x86_64 mingw32)"

$install.packages.compile.from.source
[1] "interactive"

$internet.info
[1] 2

$keep.parse.data
[1] TRUE

$keep.parse.data.pkgs
[1] FALSE

$keep.source
[1] TRUE

$keep.source.pkgs
[1] FALSE

$locatorBell
[1] TRUE

$mailer
[1] "mailto"

$matprod
[1] "default"

$max.print
[1] 1000

$menu.graphics
[1] FALSE

$na.action
[1] "na.omit"

$nwarnings
[1] 50

$OutDec
[1] "."

$page_viewer
function (url, title = "RStudio Viewer", self_contained = FALSE) 
{
    if (!is.character(url) || (length(url) != 1)) 
        stop("url must be a single element character vector.", 
            call. = FALSE)
    if (!is.character(title) || (length(title) != 1)) 
        stop("title must be a single element character vector.", 
            call. = FALSE)
    if (!is.logical(self_contained) || (length(self_contained) != 
        1)) 
        stop("self_contained must be a single element logical vector.", 
            call. = FALSE)
    invisible(.Call("rs_showPageViewer", url, title, self_contained, 
        PACKAGE = "(embedding)"))
}
<environment: 0x000002a5758b9f40>

$pager
function (files, header, title, delete.file) 
{
    .rs.pager(files, header, title, delete.file)
}
<environment: 0x000002a5758b9f40>

$papersize
[1] "a4"

$PCRE_limit_recursion
[1] NA

$PCRE_study
[1] FALSE

$PCRE_use_JIT
[1] TRUE

$pdfviewer
[1] "C:/PROGRA~1/R/R-41~1.0/bin/x64/open.exe"

$pkgType
[1] "both"

$plumber.docs.callback
function (url) 
{
    invisible(.Call("rs_plumberviewer", url, getwd(), "window", 
        PACKAGE = "(embedding)"))
}
<environment: base>
attr(,"plumberViewerType")
[1] "window"

$plumber.swagger.url
function (url) 
{
    invisible(.Call("rs_plumberviewer", url, getwd(), "window", 
        PACKAGE = "(embedding)"))
}
<environment: base>
attr(,"plumberViewerType")
[1] "window"

$profvis.keep_output
[1] TRUE

$profvis.print
function (x) 
{
    .rs.profilePrint(x)
}
<environment: 0x000002a5732cdf38>

$profvis.prof_extension
[1] ".Rprof"

$profvis.prof_output
[1] "E:/Documents/Doutorado/Publicações/Papers/paper_tpp/.Rproj.user/A3CB51B4/profiles-cache"

$prompt
[1] "> "

$repos
                       CRAN 
"https://cran.rstudio.com/" 
attr(,"RStudio")
[1] TRUE

$restart
function (afterRestartCommand = "") 
{
    .rs.restartR(afterRestartCommand)
}
<environment: 0x000002a5758b9f40>

$reticulate.initialized
function () 
{
    options(reticulate.initialized = NULL)
    .rs.reticulate.onPythonInitialized()
    .rs.reticulate.enqueueClientEvent(.rs.reticulateEvents$PYTHON_INITIALIZED, 
        list())
    .Call("rs_reticulateInitialized", PACKAGE = "(embedding)")
}
<environment: 0x000002a575f79bd8>

$reticulate.repl.hook
function (buffer, contents, trimmed) 
{
    .rs.reticulate.replHook(buffer, contents, trimmed)
}
<environment: 0x000002a575f79bd8>

$reticulate.repl.initialize
function () 
{
    .rs.reticulate.replInitialize()
}
<environment: 0x000002a575f79bd8>

$reticulate.repl.teardown
function () 
{
    .rs.reticulate.replTeardown()
}
<environment: 0x000002a575f79bd8>

$rsconnect.check.certificate
[1] TRUE

$rstudio.notebook.executing
[1] FALSE

$RStudioGD.antialias
[1] "default"

$RStudioGD.backend
[1] "default"

$scipen
[1] 0

$shiny.launch.browser
function (url) 
{
    invisible(.Call("rs_shinyviewer", url, getwd(), "window", 
        NULL, PACKAGE = "(embedding)"))
}
<environment: base>
attr(,"shinyViewerType")
[1] "window"

$shinygadgets.showdialog
function (caption, url, width = NULL, height = NULL) 
{
    if (!is.character(caption) || (length(caption) != 1)) 
        stop("caption must be a single element character vector.", 
            call. = FALSE)
    if (!is.character(url) || (length(url) != 1)) 
        stop("url must be a single element character vector.", 
            call. = FALSE)
    if (is.null(width)) 
        width <- 600
    if (is.null(height)) 
        height <- 600
    if (!is.numeric(width) || (length(width) != 1)) 
        stop("width must be a single element numeric vector.", 
            call. = FALSE)
    if (!is.numeric(height) || (length(height) != 1)) 
        stop("height must be a single element numeric vector.", 
            call. = FALSE)
    invisible(.Call("rs_showShinyGadgetDialog", caption, url, 
        width, height, PACKAGE = "(embedding)"))
}
<environment: 0x000002a5758b9f40>

$show.coef.Pvalues
[1] TRUE

$show.error.messages
[1] TRUE

$show.signif.stars
[1] TRUE

$str
$str$strict.width
[1] "no"

$str$digits.d
[1] 3

$str$vec.len
[1] 4

$str$list.len
[1] 99

$str$deparse.lines
NULL

$str$drop.deparse.attr
[1] TRUE

$str$formatNum
function (x, ...) 
format(x, trim = TRUE, drop0trailing = TRUE, ...)
<environment: 0x000002a574d91810>


$str.dendrogram.last
[1] "`"

$stringsAsFactors
[1] FALSE

$terminal.manager
$terminal.manager$terminalActivate
function (id = NULL, show = TRUE) 
{
    if (!is.null(id) && (!is.character(id) || (length(id) != 
        1))) 
        stop("'id' must be NULL or a character vector of length one")
    if (!is.logical(show)) 
        stop("'show' must be TRUE or FALSE")
    .Call("rs_terminalActivate", id, show)
    invisible(NULL)
}

$terminal.manager$terminalCreate
function (caption = NULL, show = TRUE, shellType = NULL) 
{
    if (!is.null(caption) && (!is.character(caption) || (length(caption) != 
        1))) 
        stop("'caption' must be NULL or a character vector of length one")
    if (is.null(show) || !is.logical(show)) 
        stop("'show' must be a logical vector")
    if (!is.null(shellType) && (!is.character(shellType) || (length(shellType) != 
        1))) 
        stop("'shellType' must be NULL or a character vector of length one")
    validShellType = TRUE
    if (!is.null(shellType)) {
        validShellType <- tolower(shellType) %in% c("default", 
            "win-cmd", "win-ps", "win-git-bash", "win-wsl-bash", 
            "ps-core", "custom")
    }
    if (!validShellType) 
        stop("'shellType' must be NULL, or one of 'default', 'win-cmd', 'win-ps', 'win-git-bash', 'win-wsl-bash', 'ps-core', 'bash', 'zsh', or 'custom'.")
    .Call("rs_terminalCreate", caption, show, shellType)
}

$terminal.manager$terminalClear
function (id) 
{
    if (is.null(id) || !is.character(id) || length(id) != 1) 
        stop("'id' must be a character vector of length one")
    .Call("rs_terminalClear", id)
    invisible(NULL)
}

$terminal.manager$terminalList
function () 
{
    .Call("rs_terminalList")
}

$terminal.manager$terminalContext
function (id) 
{
    if (is.null(id) || !is.character(id) || (length(id) != 1)) 
        stop("'id' must be a single element character vector")
    .Call("rs_terminalContext", id)
}

$terminal.manager$terminalBuffer
function (id, stripAnsi = TRUE) 
{
    if (is.null(id) || !is.character(id) || (length(id) != 1)) 
        stop("'id' must be a single element character vector")
    if (is.null(stripAnsi) || !is.logical(stripAnsi)) 
        stop("'stripAnsi' must be a logical vector")
    .Call("rs_terminalBuffer", id, stripAnsi)
}

$terminal.manager$terminalVisible
function () 
{
    .Call("rs_terminalVisible")
}

$terminal.manager$terminalBusy
function (id) 
{
    if (is.null(id) || !is.character(id)) 
        stop("'id' must be a character vector")
    .Call("rs_terminalBusy", id)
}

$terminal.manager$terminalRunning
function (id) 
{
    if (is.null(id) || !is.character(id)) 
        stop("'id' must be a character vector")
    .Call("rs_terminalRunning", id)
}

$terminal.manager$terminalKill
function (id) 
{
    if (is.null(id) || !is.character(id)) 
        stop("'id' must be a character vector")
    .Call("rs_terminalKill", id)
    invisible(NULL)
}

$terminal.manager$terminalSend
function (id, text) 
{
    if (!is.character(text)) 
        stop("'text' should be a character vector", call. = FALSE)
    if (is.null(id) || !is.character(id) || length(id) != 1) 
        stop("'id' must be a character vector of length one")
    .Call("rs_terminalSend", id, text)
    invisible(NULL)
}

$terminal.manager$terminalExecute
function (command, workingDir = NULL, env = character(), show = TRUE) 
{
    if (is.null(command) || !is.character(command) || (length(command) != 
        1)) 
        stop("'command' must be a single element character vector")
    if (!is.null(workingDir) && (!is.character(workingDir) || 
        (length(workingDir) != 1))) 
        stop("'workingDir' must be a single element character vector")
    if (!is.null(env) && !is.character(env)) 
        stop("'env' must be a character vector")
    if (is.null(show) || !is.logical(show)) 
        stop("'show' must be a logical vector")
    .Call("rs_terminalExecute", command, workingDir, env, show, 
        PACKAGE = "(embedding)")
}

$terminal.manager$terminalExitCode
function (id) 
{
    if (is.null(id) || !is.character(id) || (length(id) != 1)) 
        stop("'id' must be a single element character vector")
    .Call("rs_terminalExitCode", id, PACKAGE = "(embedding)")
}


$timeout
[1] 60

$ts.eps
[1] 1e-05

$ts.S.compat
[1] FALSE

$unzip
[1] "internal"

$useFancyQuotes
[1] TRUE

$verbose
[1] FALSE

$viewer
function (url, height = NULL) 
{
    if (!is.character(url) || (length(url) != 1)) 
        stop("url must be a single element character vector.", 
            call. = FALSE)
    if (identical(height, "maximize")) 
        height <- -1
    if (!is.null(height) && (!is.numeric(height) || (length(height) != 
        1))) 
        stop("height must be a single element numeric vector or 'maximize'.", 
            call. = FALSE)
    invisible(.Call("rs_viewer", url, height, PACKAGE = "(embedding)"))
}
<environment: 0x000002a5758b9f40>

$warn
[1] 0

$warning.length
[1] 1000

$width
[1] 91

$windowsTimeouts
[1] 100 500

